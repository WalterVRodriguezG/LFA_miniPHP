Token: SimboloInicio <?
Token: SintaxisPHP php
Token: ComentarioExtendido /*
 * This file is part of Psy Shell.
 *
 * (c) 2012-2017 Justin Hileman
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Token: PReservada namespace
Token: IdentCadena Psy
Token: Separador ;
Token: PReservada use
Token: IdentCadena Psy
Token: Separador \
Token: IdentCadena VersionUpdater
Token: Separador \
Token: IdentCadena GitHubChecker
Token: Separador ;
Token: PReservada use
Token: IdentCadena Symfony
Token: Separador \
Token: IdentCadena Component
Token: Separador \
Token: IdentCadena Console
Token: Separador \
Token: IdentCadena Input
Token: Separador \
Token: IdentCadena ArgvInput
Token: Separador ;
Token: PReservada use
Token: IdentCadena Symfony
Token: Separador \
Token: IdentCadena Component
Token: Separador \
Token: IdentCadena Console
Token: Separador \
Token: IdentCadena Input
Token: Separador \
Token: IdentCadena InputArgument
Token: Separador ;
Token: PReservada use
Token: IdentCadena Symfony
Token: Separador \
Token: IdentCadena Component
Token: Separador \
Token: IdentCadena Console
Token: Separador \
Token: IdentCadena Input
Token: Separador \
Token: IdentCadena InputDefinition
Token: Separador ;
Token: PReservada use
Token: IdentCadena Symfony
Token: Separador \
Token: IdentCadena Component
Token: Separador \
Token: IdentCadena Console
Token: Separador \
Token: IdentCadena Input
Token: Separador \
Token: IdentCadena InputOption
Token: Separador ;
Token: PReservada use
Token: IdentCadena XdgBaseDir
Token: Separador \
Token: IdentCadena Xdg
Token: Separador ;
Token: Condicional if (
Token: OperadorLogico !
Token: IdentCadena function_exists
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena Psy
Token: Separador \
Token: IdentCadena sh
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: ComentarioExtendido /**
     * Command to return the eval-able code to startup PsySH.
     *
     *     eval(\Psy\sh());
     *
     * @return string
     */
Token: PReservada function
Token: IdentCadena sh
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: InicioFuncion {
Token: PReservada return
Token: Separador '
Token: IdentCadena extract
Token: AperturaDefinicion (
Token: Separador \
Token: IdentCadena Psy
Token: Separador \
Token: IdentCadena debug
Token: AperturaDefinicion (
Token: IdentCadena get_defined_vars
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: IdentCadena isset
Token: AperturaDefinicion (
Token: Variable $this
Token: FinDefinicion )
Token: Separador ?
Token: Variable $this
Token: AsignacionVariable :
Token: IdentCadena null
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ;
Token: Separador '
Token: Separador ;
Token: FinFuncion }
Token: FinFuncion }
Token: Condicional if (
Token: OperadorLogico !
Token: IdentCadena function_exists
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena Psy
Token: Separador \
Token: IdentCadena debug
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: OperadorAritmetico /
Token: OperadorAritmetico **
Token: OperadorAritmetico *
Token: IdentCadena Invoke
Token: IdentCadena a
Token: IdentCadena Psy
Token: IdentCadena Shell
Token: IdentCadena from
Token: IdentCadena the
Token: IdentCadena current
Token: IdentCadena context
Token: Separador .
Token: OperadorAritmetico *
Token: OperadorAritmetico *
Token: IdentCadena For
Token: IdentCadena example
Token: AsignacionVariable :
Token: OperadorAritmetico *
Token: OperadorAritmetico *
Token: Iterador foreach (
Token: Variable $items
Token: PReservada as
Token: Variable $item
Token: FinDefinicion )
Token: InicioFuncion {
Token: OperadorAritmetico *
Token: Separador \
Token: IdentCadena Psy
Token: Separador \
Token: IdentCadena debug
Token: AperturaDefinicion (
Token: IdentCadena get_defined_vars
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ;
Token: OperadorAritmetico *
Token: FinFuncion }
Token: OperadorAritmetico *
Token: OperadorAritmetico *
Token: IdentCadena If
Token: IdentCadena you
Token: IdentCadena would
Token: IdentCadena like
Token: IdentCadena your
Token: IdentCadena shell
Token: IdentCadena interaction
Token: IdentCadena to
Token: IdentCadena affect
Token: IdentCadena the
Token: IdentCadena state
Token: IdentCadena of
Token: IdentCadena the
Token: OperadorAritmetico *
Token: IdentCadena current
Token: IdentCadena context
Token: Separador ,
Token: IdentCadena you
Token: IdentCadena can
Token: IdentCadena extract
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: IdentCadena the
Token: IdentCadena values
Token: IdentCadena returned
Token: IdentCadena from
Token: IdentCadena this
Token: IdentCadena call
Token: AsignacionVariable :
Token: OperadorAritmetico *
Token: OperadorAritmetico *
Token: Iterador foreach (
Token: Variable $items
Token: PReservada as
Token: Variable $item
Token: FinDefinicion )
Token: InicioFuncion {
Token: OperadorAritmetico *
Token: IdentCadena extract
Token: AperturaDefinicion (
Token: Separador \
Token: IdentCadena Psy
Token: Separador \
Token: IdentCadena debug
Token: AperturaDefinicion (
Token: IdentCadena get_defined_vars
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ;
Token: OperadorAritmetico *
Token: IdentCadena var_dump
Token: AperturaDefinicion (
Token: Variable $item
Token: FinDefinicion )
Token: Separador ;
Token: ComentarioLineal // will be whatever you set $item to in Psy Shell
Token: OperadorAritmetico *
Token: FinFuncion }
Token: OperadorAritmetico *
Token: OperadorAritmetico *
Token: IdentCadena Optionally
Token: Separador ,
Token: IdentCadena supply
Token: IdentCadena an
Token: IdentCadena object
Token: PReservada as
Token: IdentCadena the
Error 1200, el simbolo no coincide 
Token: Variable $boundObject
Error 1200, el simbolo no coincide 
Token: IdentCadena parameter
Token: Separador .
Token: IdentCadena This
Token: OperadorAritmetico *
Token: IdentCadena determines
Token: IdentCadena the
Token: IdentCadena value
Error 1200, el simbolo no coincide 
Token: Variable $this
Error 1200, el simbolo no coincide 
Token: IdentCadena will
Token: IdentCadena have
Token: IdentCadena in
Token: IdentCadena the
Token: IdentCadena shell
Token: Separador ,
Token: IdentCadena and
Token: IdentCadena sets
Token: IdentCadena up
Token: IdentCadena class
Token: OperadorAritmetico *
Token: IdentCadena scope
Token: IdentCadena so
Token: IdentCadena that
Token: PReservada private
Token: IdentCadena and
Token: IdentCadena protected
Token: IdentCadena members
Token: IdentCadena are
Token: IdentCadena accessible
Token: AsignacionVariable :
Token: OperadorAritmetico *
Token: OperadorAritmetico *
Token: IdentCadena class
Token: IdentCadena Foo
Token: InicioFuncion {
Token: OperadorAritmetico *
Token: PReservada function
Token: IdentCadena bar
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: InicioFuncion {
Token: OperadorAritmetico *
Token: Separador \
Token: IdentCadena Psy
Token: Separador \
Token: IdentCadena debug
Token: AperturaDefinicion (
Token: IdentCadena get_defined_vars
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: Variable $this
Token: FinDefinicion )
Token: Separador ;
Token: OperadorAritmetico *
Token: FinFuncion }
Token: OperadorAritmetico *
Token: FinFuncion }
Token: OperadorAritmetico *
Token: OperadorAritmetico *
Token: IdentCadena This
Token: IdentCadena only
Token: IdentCadena really
Token: IdentCadena works
Token: IdentCadena in
Token: SintaxisPHP PHP
Token: TDatoDouble 5.4
Token: OperadorAritmetico +
Token: IdentCadena and
Token: IdentCadena HHVM
Token: TDatoDouble 3.5
Token: OperadorAritmetico +
Token: Separador ,
Token: IdentCadena so
Token: IdentCadena upgrade
Token: IdentCadena already
Token: Separador .
Token: OperadorAritmetico *
Token: OperadorAritmetico *
Error 1200, el simbolo no coincide 
Token: IdentCadena param
Token: IdentCadena array
Token: Variable $vars
Token: IdentCadena Scope
Token: IdentCadena variables
Token: IdentCadena from
Token: IdentCadena the
Token: IdentCadena calling
Token: IdentCadena context
Token: AperturaDefinicion (
Token: PReservada default
Token: AsignacionVariable :
Token: IdentCadena array
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: OperadorAritmetico *
Error 1200, el simbolo no coincide 
Token: IdentCadena param
Token: IdentCadena object
Token: Variable $boundObject
Token: IdentCadena Bound
Token: IdentCadena object
Token: AperturaDefinicion (
Token: Variable $this
Token: FinDefinicion )
Token: IdentCadena value
Token: IdentCadena for
Token: IdentCadena the
Token: IdentCadena shell
Token: OperadorAritmetico *
Token: OperadorAritmetico *
Error 1200, el simbolo no coincide 
Token: PReservada return
Token: IdentCadena array
Token: IdentCadena Scope
Token: IdentCadena variables
Token: IdentCadena from
Token: IdentCadena the
Token: IdentCadena debugger
Token: IdentCadena session
Token: OperadorAritmetico *
Token: OperadorAritmetico /
Token: PReservada function
Token: IdentCadena debug
Token: AperturaDefinicion (
Token: IdentCadena array
Token: Variable $vars
Token: AsignacionVariable =
Token: IdentCadena array
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: Variable $boundObject
Token: AsignacionVariable =
Token: IdentCadena null
Token: FinDefinicion )
Token: InicioFuncion {
Token: PReservada echo
Token: IdentCadena PHP_EOL
Token: Separador ;
Token: Variable $sh
Token: AsignacionVariable =
Token: PReservada new
Token: IdentCadena Shell
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: Variable $sh
Token: AsignacionVariable ->
Token: IdentCadena setScopeVariables
Token: AperturaDefinicion (
Token: Variable $vars
Token: FinDefinicion )
Token: Separador ;
Token: ComentarioLineal // Show a couple of lines of call context for the debug session.
Token: ComentarioLineal //
Token: ComentarioLineal // @todo come up with a better way of doing this which doesn
Token: Separador '
Token: IdentCadena t
Token: IdentCadena involve
Token: IdentCadena injecting
Token: IdentCadena input
Token: AsignacionVariable :
Token: OperadorAritmetico -
Token: IdentCadena P
Token: Condicional if (
Token: Variable $sh
Token: AsignacionVariable ->
Token: IdentCadena has
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena whereami
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $sh
Token: AsignacionVariable ->
Token: IdentCadena addInput
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena whereami
Token: OperadorAritmetico -
Token: IdentCadena n2
Token: Separador '
Token: Separador ,
Token: TDatoLogico true
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: Condicional if (
Token: Variable $boundObject
Token: OperadorLogico !=
Token: AsignacionVariable =
Token: IdentCadena null
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $sh
Token: AsignacionVariable ->
Token: IdentCadena setBoundObject
Token: AperturaDefinicion (
Token: Variable $boundObject
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: Variable $sh
Token: AsignacionVariable ->
Token: IdentCadena run
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: PReservada return
Token: Variable $sh
Token: AsignacionVariable ->
Token: IdentCadena getScopeVariables
Token: AperturaDefinicion (
Token: TDatoLogico false
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: FinFuncion }
Token: Condicional if (
Token: OperadorLogico !
Token: IdentCadena function_exists
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena Psy
Token: Separador \
Token: IdentCadena info
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: ComentarioExtendido /**
     * Get a bunch of debugging info about the current PsySH environment and
     * configuration.
     *
     * If a Configuration param is passed, that configuration is stored and
     * used for the current shell session, and no debugging info is returned.
     *
     * @param Configuration|null $config
     *
     * @return array|null
     */
Token: PReservada function
Token: IdentCadena info
Token: AperturaDefinicion (
Token: IdentCadena Configuration
Token: Variable $config
Token: AsignacionVariable =
Token: IdentCadena null
Token: FinDefinicion )
Token: InicioFuncion {
Token: PReservada static
Token: Variable $lastConfig
Token: Separador ;
Token: Condicional if (
Token: Variable $config
Token: OperadorLogico !=
Token: AsignacionVariable =
Token: IdentCadena null
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $lastConfig
Token: AsignacionVariable =
Token: Variable $config
Token: Separador ;
Token: PReservada return
Token: Separador ;
Token: FinFuncion }
Token: Variable $xdg
Token: AsignacionVariable =
Token: PReservada new
Token: IdentCadena Xdg
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: Variable $home
Token: AsignacionVariable =
Token: IdentCadena rtrim
Token: AperturaDefinicion (
Token: IdentCadena str_replace
Token: AperturaDefinicion (
Token: Separador '
Token: Separador \
Token: Separador \
Token: Separador '
Token: Separador ,
Token: ValorHTML '/'
Token: Separador ,
Token: Variable $xdg
Token: AsignacionVariable ->
Token: IdentCadena getHomeDir
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ,
Token: ValorHTML '/'
Token: FinDefinicion )
Token: Separador ;
Token: Variable $homePattern
Token: AsignacionVariable =
Token: Separador '
Error 1200, el simbolo no coincide 
Error 1200, el simbolo no coincide 
Token: Separador '
Token: Separador .
Token: IdentCadena preg_quote
Token: AperturaDefinicion (
Token: Variable $home
Token: Separador ,
Token: ValorHTML '#'
Token: FinDefinicion )
Token: Separador .
Token: Separador '
Token: OperadorAritmetico /
Error 1200, el simbolo no coincide 
Token: Separador '
Token: Separador ;
Token: Variable $prettyPath
Token: AsignacionVariable =
Token: PReservada function
Token: AperturaDefinicion (
Token: Variable $path
Token: FinDefinicion )
Token: PReservada use
Token: AperturaDefinicion (
Token: Variable $homePattern
Token: FinDefinicion )
Token: InicioFuncion {
Token: Condicional if (
Token: IdentCadena is_string
Token: AperturaDefinicion (
Token: Variable $path
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: PReservada return
Token: IdentCadena preg_replace
Token: AperturaDefinicion (
Token: Variable $homePattern
Token: Separador ,
Token: Separador '
Error 1200, el simbolo no coincide 
Token: OperadorAritmetico /
Token: Separador '
Token: Separador ,
Token: Variable $path
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: IdentCadena else
Token: InicioFuncion {
Token: PReservada return
Token: Variable $path
Token: Separador ;
Token: FinFuncion }
Token: FinFuncion }
Token: Separador ;
Token: Variable $config
Token: AsignacionVariable =
Token: Variable $lastConfig
Token: Separador ?
Token: AsignacionVariable :
Token: PReservada new
Token: IdentCadena Configuration
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: Variable $core
Token: AsignacionVariable =
Token: IdentCadena array
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena PsySH
Token: IdentCadena version
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: IdentCadena Shell
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena VERSION
Token: Separador ,
Token: Separador '
Token: SintaxisPHP PHP
Token: IdentCadena version
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: IdentCadena PHP_VERSION
Token: Separador ,
Token: Separador '
Token: PReservada default
Token: IdentCadena includes
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getDefaultIncludes
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: PReservada require
Token: IdentCadena semicolons
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena requireSemicolons
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena error
Token: IdentCadena logging
Token: IdentCadena level
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena errorLoggingLevel
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena config
Token: IdentCadena file
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: IdentCadena array
Token: AperturaDefinicion (
Token: Separador '
Token: PReservada default
Token: IdentCadena config
Token: IdentCadena file
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $prettyPath
Token: AperturaDefinicion (
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getConfigFile
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena local
Token: IdentCadena config
Token: IdentCadena file
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $prettyPath
Token: AperturaDefinicion (
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getLocalConfigFile
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena PSYSH_CONFIG
Token: IdentCadena env
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $prettyPath
Token: AperturaDefinicion (
Token: IdentCadena getenv
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena PSYSH_CONFIG
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ,
Token: FinDefinicion )
Token: Separador ,
Token: ComentarioLineal // 
Token: Separador '
Token: IdentCadena config
Token: IdentCadena dir
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getConfigDir
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: ComentarioLineal // 
Token: Separador '
Token: IdentCadena data
Token: IdentCadena dir
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getDataDir
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: ComentarioLineal // 
Token: Separador '
Token: IdentCadena runtime
Token: IdentCadena dir
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getRuntimeDir
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: FinDefinicion )
Token: Separador ;
Token: ComentarioLineal // Use an explicit, fresh update check here, rather than relying on whatever is in $config.
Token: Variable $checker
Token: AsignacionVariable =
Token: PReservada new
Token: IdentCadena GitHubChecker
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: Variable $updateAvailable
Token: AsignacionVariable =
Token: IdentCadena null
Token: Separador ;
Token: Variable $latest
Token: AsignacionVariable =
Token: IdentCadena null
Token: Separador ;
Token: PReservada try
Token: InicioFuncion {
Token: Variable $updateAvailable
Token: AsignacionVariable =
Token: OperadorLogico !
Token: Variable $checker
Token: AsignacionVariable ->
Token: IdentCadena isLatest
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: Variable $latest
Token: AsignacionVariable =
Token: Variable $checker
Token: AsignacionVariable ->
Token: IdentCadena getLatest
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: IdentCadena catch
Token: AperturaDefinicion (
Token: Separador \
Token: IdentCadena Exception
Token: Variable $e
Token: FinDefinicion )
Token: InicioFuncion {
Token: FinFuncion }
Token: Variable $updates
Token: AsignacionVariable =
Token: IdentCadena array
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena update
Token: IdentCadena available
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $updateAvailable
Token: Separador ,
Token: Separador '
Token: IdentCadena latest
Token: IdentCadena release
Token: IdentCadena version
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $latest
Token: Separador ,
Token: Separador '
Token: IdentCadena update
Token: IdentCadena check
Token: IdentCadena interval
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getUpdateCheck
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena update
Token: IdentCadena cache
Token: IdentCadena file
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $prettyPath
Token: AperturaDefinicion (
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getUpdateCheckCacheFile
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ,
Token: FinDefinicion )
Token: Separador ;
Token: Condicional if (
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena hasReadline
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $info
Token: AsignacionVariable =
Token: IdentCadena readline_info
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: Variable $readline
Token: AsignacionVariable =
Token: IdentCadena array
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena readline
Token: IdentCadena available
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: TDatoLogico true
Token: Separador ,
Token: Separador '
Token: IdentCadena readline
Token: IdentCadena enabled
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena useReadline
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena readline
Token: IdentCadena service
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: IdentCadena get_class
Token: AperturaDefinicion (
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getReadline
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ,
Token: FinDefinicion )
Token: Separador ;
Token: Condicional if (
Token: IdentCadena isset
Token: AperturaDefinicion (
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena library_version
Token: Separador '
Token: Separador ]
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena readline
Token: IdentCadena library
Token: Separador '
Token: Separador ]
Token: AsignacionVariable =
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena library_version
Token: Separador '
Token: Separador ]
Token: Separador ;
Token: FinFuncion }
Token: Condicional if (
Token: IdentCadena isset
Token: AperturaDefinicion (
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena readline_name
Token: Separador '
Token: Separador ]
Token: FinDefinicion )
Token: OperadorLogico &&
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena readline_name
Token: Separador '
Token: Separador ]
Token: OperadorLogico !=
Token: AsignacionVariable =
Token: Separador '
Token: Separador '
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena readline
Token: IdentCadena name
Token: Separador '
Token: Separador ]
Token: AsignacionVariable =
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena readline_name
Token: Separador '
Token: Separador ]
Token: Separador ;
Token: FinFuncion }
Token: FinFuncion }
Token: IdentCadena else
Token: InicioFuncion {
Token: Variable $readline
Token: AsignacionVariable =
Token: IdentCadena array
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena readline
Token: IdentCadena available
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: TDatoLogico false
Token: Separador ,
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: Variable $pcntl
Token: AsignacionVariable =
Token: IdentCadena array
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena pcntl
Token: IdentCadena available
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: IdentCadena function_exists
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena pcntl_signal
Token: Separador '
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena posix
Token: IdentCadena available
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: IdentCadena function_exists
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena posix_getpid
Token: Separador '
Token: FinDefinicion )
Token: Separador ,
Token: FinDefinicion )
Token: Separador ;
Token: Variable $disabledFuncs
Token: AsignacionVariable =
Token: IdentCadena array_map
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena trim
Token: Separador '
Token: Separador ,
Token: IdentCadena explode
Token: AperturaDefinicion (
Token: ValorHTML ','
Token: Separador ,
Token: IdentCadena ini_get
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena disable_functions
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ;
Token: Condicional if (
Token: IdentCadena in_array
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena pcntl_signal
Token: Separador '
Token: Separador ,
Token: Variable $disabledFuncs
Token: FinDefinicion )
Token: OperadorLogico ||
Token: IdentCadena in_array
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena pcntl_fork
Token: Separador '
Token: Separador ,
Token: Variable $disabledFuncs
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena pcntl
Token: IdentCadena disabled
Token: Separador '
Token: Separador ]
Token: AsignacionVariable =
Token: TDatoLogico true
Token: Separador ;
Token: FinFuncion }
Token: Variable $history
Token: AsignacionVariable =
Token: IdentCadena array
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena history
Token: IdentCadena file
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $prettyPath
Token: AperturaDefinicion (
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getHistoryFile
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena history
Token: IdentCadena size
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getHistorySize
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena erase
Token: IdentCadena duplicates
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getEraseDuplicates
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: FinDefinicion )
Token: Separador ;
Token: Variable $docs
Token: AsignacionVariable =
Token: IdentCadena array
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena manual
Token: IdentCadena db
Token: IdentCadena file
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $prettyPath
Token: AperturaDefinicion (
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getManualDbFile
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena sqlite
Token: IdentCadena available
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: TDatoLogico true
Token: Separador ,
Token: FinDefinicion )
Token: Separador ;
Token: PReservada try
Token: InicioFuncion {
Token: Condicional if (
Token: Variable $db
Token: AsignacionVariable =
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getManualDb
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Condicional if (
Token: Variable $q
Token: AsignacionVariable =
Token: Variable $db
Token: AsignacionVariable ->
Token: IdentCadena query
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena SELECT
Token: OperadorAritmetico *
Token: IdentCadena FROM
Token: IdentCadena meta
Token: Separador ;
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $q
Token: AsignacionVariable ->
Token: IdentCadena setFetchMode
Token: AperturaDefinicion (
Token: Separador \
Token: IdentCadena PDO
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena FETCH_KEY_PAIR
Token: FinDefinicion )
Token: Separador ;
Token: Variable $meta
Token: AsignacionVariable =
Token: Variable $q
Token: AsignacionVariable ->
Token: IdentCadena fetchAll
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: Iterador foreach (
Token: Variable $meta
Token: PReservada as
Token: Variable $key
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $val
Token: FinDefinicion )
Token: InicioFuncion {
Token: Condicional switch (
Token: Variable $key
Token: FinDefinicion )
Token: InicioFuncion {
Token: IdentCadena case
Token: Separador '
Token: IdentCadena built_at
Token: Separador '
Token: AsignacionVariable :
Token: Variable $d
Token: AsignacionVariable =
Token: PReservada new
Token: Separador \
Token: IdentCadena DateTime
Token: AperturaDefinicion (
Token: ValorHTML '@'
Token: Separador .
Token: Variable $val
Token: FinDefinicion )
Token: Separador ;
Token: Variable $val
Token: AsignacionVariable =
Token: Variable $d
Token: AsignacionVariable ->
Token: IdentCadena format
Token: AperturaDefinicion (
Token: Separador \
Token: IdentCadena DateTime
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena RFC2822
Token: FinDefinicion )
Token: Separador ;
Token: IdentCadena break
Token: Separador ;
Token: FinFuncion }
Token: Variable $key
Token: AsignacionVariable =
Token: Separador '
Token: IdentCadena db
Token: Separador '
Token: Separador .
Token: IdentCadena str_replace
Token: AperturaDefinicion (
Token: ValorHTML '_'
Token: Separador ,
Token: ValorHTML ' '
Token: Separador ,
Token: Variable $key
Token: FinDefinicion )
Token: Separador ;
Token: Variable $recordset
Token: Separador [
Token: Variable $key
Token: Separador ]
Token: AsignacionVariable =
Token: Variable $val
Token: Separador ;
Token: FinFuncion }
Token: FinFuncion }
Token: IdentCadena else
Token: InicioFuncion {
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena db
Token: IdentCadena schema
Token: Separador '
Token: Separador ]
Token: AsignacionVariable =
Token: Separador '
Token: TDatoDouble 0.1
Token: Separador .
Token: TDatoEntero 0
Token: Separador '
Token: Separador ;
Token: FinFuncion }
Token: FinFuncion }
Token: FinFuncion }
Token: IdentCadena catch
Token: AperturaDefinicion (
Token: IdentCadena Exception
Token: Separador \
Token: IdentCadena RuntimeException
Token: Variable $e
Token: FinDefinicion )
Token: InicioFuncion {
Token: Condicional if (
Token: Variable $e
Token: AsignacionVariable ->
Token: IdentCadena getMessage
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: OperadorLogico ==
Token: AsignacionVariable =
Token: Separador '
Token: IdentCadena SQLite
Token: IdentCadena PDO
Token: IdentCadena driver
Token: IdentCadena not
Token: IdentCadena found
Token: Separador '
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena sqlite
Token: IdentCadena available
Token: Separador '
Token: Separador ]
Token: AsignacionVariable =
Token: TDatoLogico false
Token: Separador ;
Token: FinFuncion }
Token: IdentCadena else
Token: InicioFuncion {
Token: IdentCadena throw
Token: Variable $e
Token: Separador ;
Token: FinFuncion }
Token: FinFuncion }
Token: Variable $autocomplete
Token: AsignacionVariable =
Token: IdentCadena array
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena tab
Token: IdentCadena completion
Token: IdentCadena enabled
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getTabCompletion
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena custom
Token: IdentCadena matchers
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: IdentCadena array_map
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena get_class
Token: Separador '
Token: Separador ,
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena getTabCompletionMatchers
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ,
Token: Separador '
Token: IdentCadena bracketed
Token: IdentCadena paste
Token: Separador '
Token: AsignacionVariable =
Token: OperadorLogico >
Token: Variable $config
Token: AsignacionVariable ->
Token: IdentCadena useBracketedPaste
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ,
Token: FinDefinicion )
Token: Separador ;
Token: PReservada return
Token: IdentCadena array_merge
Token: AperturaDefinicion (
Token: Variable $core
Token: Separador ,
Token: IdentCadena compact
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena updates
Token: Separador '
Token: Separador ,
Token: Separador '
Token: IdentCadena pcntl
Token: Separador '
Token: Separador ,
Token: Separador '
Token: IdentCadena readline
Token: Separador '
Token: Separador ,
Token: Separador '
Token: IdentCadena history
Token: Separador '
Token: Separador ,
Token: Separador '
Token: IdentCadena docs
Token: Separador '
Token: Separador ,
Token: Separador '
Token: IdentCadena autocomplete
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: FinFuncion }
Token: Condicional if (
Token: OperadorLogico !
Token: IdentCadena function_exists
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena Psy
Token: Separador \
Token: IdentCadena bin
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: ComentarioExtendido /**
     * `psysh` command line executable.
     *
     * @return Closure
     */
Token: PReservada function
Token: IdentCadena bin
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: InicioFuncion {
Token: PReservada return
Token: PReservada function
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $usageException
Token: AsignacionVariable =
Token: IdentCadena null
Token: Separador ;
Token: Variable $input
Token: AsignacionVariable =
Token: PReservada new
Token: IdentCadena ArgvInput
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: PReservada try
Token: InicioFuncion {
Token: Variable $input
Token: AsignacionVariable ->
Token: IdentCadena bind
Token: AperturaDefinicion (
Token: PReservada new
Token: IdentCadena InputDefinition
Token: AperturaDefinicion (
Token: IdentCadena array
Token: AperturaDefinicion (
Token: PReservada new
Token: IdentCadena InputOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena help
Token: Separador '
Token: Separador ,
Token: ValorHTML 'h'
Token: Separador ,
Token: IdentCadena InputOption
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena VALUE_NONE
Token: FinDefinicion )
Token: Separador ,
Token: PReservada new
Token: IdentCadena InputOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena config
Token: Separador '
Token: Separador ,
Token: ValorHTML 'c'
Token: Separador ,
Token: IdentCadena InputOption
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena VALUE_REQUIRED
Token: FinDefinicion )
Token: Separador ,
Token: PReservada new
Token: IdentCadena InputOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena version
Token: Separador '
Token: Separador ,
Token: ValorHTML 'v'
Token: Separador ,
Token: IdentCadena InputOption
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena VALUE_NONE
Token: FinDefinicion )
Token: Separador ,
Token: PReservada new
Token: IdentCadena InputOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena cwd
Token: Separador '
Token: Separador ,
Token: IdentCadena null
Token: Separador ,
Token: IdentCadena InputOption
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena VALUE_REQUIRED
Token: FinDefinicion )
Token: Separador ,
Token: PReservada new
Token: IdentCadena InputOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena color
Token: Separador '
Token: Separador ,
Token: IdentCadena null
Token: Separador ,
Token: IdentCadena InputOption
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena VALUE_NONE
Token: FinDefinicion )
Token: Separador ,
Token: PReservada new
Token: IdentCadena InputOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena no
Token: OperadorAritmetico -
Token: IdentCadena color
Token: Separador '
Token: Separador ,
Token: IdentCadena null
Token: Separador ,
Token: IdentCadena InputOption
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena VALUE_NONE
Token: FinDefinicion )
Token: Separador ,
Token: PReservada new
Token: IdentCadena InputArgument
Token: AperturaDefinicion (
Token: Separador '
Token: PReservada include
Token: Separador '
Token: Separador ,
Token: IdentCadena InputArgument
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena IS_ARRAY
Token: FinDefinicion )
Token: Separador ,
Token: FinDefinicion )
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: IdentCadena catch
Token: AperturaDefinicion (
Token: Separador \
Token: IdentCadena RuntimeException
Token: Variable $e
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $usageException
Token: AsignacionVariable =
Token: Variable $e
Token: Separador ;
Token: FinFuncion }
Token: Variable $config
Token: AsignacionVariable =
Token: IdentCadena array
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: ComentarioLineal // Handle --config
Token: Condicional if (
Token: Variable $configFile
Token: AsignacionVariable =
Token: Variable $input
Token: AsignacionVariable ->
Token: IdentCadena getOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena config
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena configFile
Token: Separador '
Token: Separador ]
Token: AsignacionVariable =
Token: Variable $configFile
Token: Separador ;
Token: FinFuncion }
Token: ComentarioLineal // Handle --color and --no-color
Token: Condicional if (
Token: Variable $input
Token: AsignacionVariable ->
Token: IdentCadena getOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena color
Token: Separador '
Token: FinDefinicion )
Token: OperadorLogico &&
Token: Variable $input
Token: AsignacionVariable ->
Token: IdentCadena getOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena no
Token: OperadorAritmetico -
Token: IdentCadena color
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $usageException
Token: AsignacionVariable =
Token: PReservada new
Token: Separador \
Token: IdentCadena RuntimeException
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena Using
Token: IdentCadena both
Token: TDatoString "--color" and "--no-color"
Token: IdentCadena options
Token: IdentCadena is
Token: IdentCadena invalid
Token: Separador .
Token: Separador '
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: Condicional elseif (
Token: Variable $input
Token: AsignacionVariable ->
Token: IdentCadena getOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena color
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena colorMode
Token: Separador '
Token: Separador ]
Token: AsignacionVariable =
Token: IdentCadena Configuration
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena COLOR_MODE_FORCED
Token: Separador ;
Token: FinFuncion }
Token: Condicional elseif (
Token: Variable $input
Token: AsignacionVariable ->
Token: IdentCadena getOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena no
Token: OperadorAritmetico -
Token: IdentCadena color
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena colorMode
Token: Separador '
Token: Separador ]
Token: AsignacionVariable =
Token: IdentCadena Configuration
Token: AsignacionVariable :
Token: AsignacionVariable :
Token: IdentCadena COLOR_MODE_DISABLED
Token: Separador ;
Token: FinFuncion }
Token: Variable $shell
Token: AsignacionVariable =
Token: PReservada new
Token: IdentCadena Shell
Token: AperturaDefinicion (
Token: PReservada new
Token: IdentCadena Configuration
Token: AperturaDefinicion (
Token: Variable $config
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ;
Token: ComentarioLineal // Handle --help
Token: Condicional if (
Token: Variable $usageException
Token: OperadorLogico !=
Token: AsignacionVariable =
Token: IdentCadena null
Token: OperadorLogico ||
Token: Variable $input
Token: AsignacionVariable ->
Token: IdentCadena getOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena help
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: Condicional if (
Token: Variable $usageException
Token: OperadorLogico !=
Token: AsignacionVariable =
Token: IdentCadena null
Token: FinDefinicion )
Token: InicioFuncion {
Token: PReservada echo
Token: Variable $usageException
Token: AsignacionVariable ->
Token: IdentCadena getMessage
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador .
Token: IdentCadena PHP_EOL
Token: Separador .
Token: IdentCadena PHP_EOL
Token: Separador ;
Token: FinFuncion }
Token: Variable $version
Token: AsignacionVariable =
Token: Variable $shell
Token: AsignacionVariable ->
Token: IdentCadena getVersion
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: Variable $name
Token: AsignacionVariable =
Token: IdentCadena basename
Token: AperturaDefinicion (
Token: IdentCadena reset
Token: AperturaDefinicion (
Token: Variable $recordset
Token: Separador [
Token: Separador '
Token: IdentCadena argv
Token: Separador '
Token: Separador ]
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ;
Token: PReservada echo
Token: OperadorLogico <
Token: OperadorLogico <
Token: OperadorLogico <
Token: IdentCadena EOL
Token: IdentCadena EOL
Token: Separador ;
Token: IdentCadena exit
Token: AperturaDefinicion (
Token: Variable $usageException
Token: OperadorLogico ==
Token: AsignacionVariable =
Token: IdentCadena null
Token: Separador ?
Token: TDatoEntero 0
Token: AsignacionVariable :
Token: TDatoEntero 1
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: ComentarioLineal // Handle --version
Token: Condicional if (
Token: Variable $input
Token: AsignacionVariable ->
Token: IdentCadena getOption
Token: AperturaDefinicion (
Token: Separador '
Token: IdentCadena version
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: InicioFuncion {
Token: PReservada echo
Token: Variable $shell
Token: AsignacionVariable ->
Token: IdentCadena getVersion
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador .
Token: IdentCadena PHP_EOL
Token: Separador ;
Token: IdentCadena exit
Token: AperturaDefinicion (
Token: TDatoEntero 0
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: ComentarioLineal // Pass additional arguments to Shell as 
Token: Separador '
Token: IdentCadena includes
Token: Separador '
Token: Variable $shell
Token: AsignacionVariable ->
Token: IdentCadena setIncludes
Token: AperturaDefinicion (
Token: Variable $input
Token: AsignacionVariable ->
Token: IdentCadena getArgument
Token: AperturaDefinicion (
Token: Separador '
Token: PReservada include
Token: Separador '
Token: FinDefinicion )
Token: FinDefinicion )
Token: Separador ;
Token: PReservada try
Token: InicioFuncion {
Token: ComentarioLineal // And go!
Token: Variable $shell
Token: AsignacionVariable ->
Token: IdentCadena run
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador ;
Token: FinFuncion }
Token: IdentCadena catch
Token: AperturaDefinicion (
Token: IdentCadena Exception
Token: Variable $e
Token: FinDefinicion )
Token: InicioFuncion {
Token: PReservada echo
Token: Variable $e
Token: AsignacionVariable ->
Token: IdentCadena getMessage
Token: AperturaDefinicion (
Token: FinDefinicion )
Token: Separador .
Token: IdentCadena PHP_EOL
Token: Separador ;
Token: ComentarioLineal // @todo this triggers the 
Token: TDatoString "exited unexpectedly"
Token: IdentCadena logic
Token: IdentCadena in
Token: IdentCadena the
Token: ComentarioLineal // ForkingLoop, so we can
Token: Separador '
Token: IdentCadena t
Token: IdentCadena exit
Token: AperturaDefinicion (
Token: TDatoEntero 1
Token: FinDefinicion )
Token: IdentCadena after
Token: IdentCadena starting
Token: IdentCadena the
Token: IdentCadena shell
Token: Separador .
Token: Separador .
Token: Separador .
Token: ComentarioLineal // fix this :)
Token: ComentarioLineal // exit(1);
Token: FinFuncion }
Token: FinFuncion }
Token: Separador ;
Token: FinFuncion }
Token: FinFuncion }
 FIN