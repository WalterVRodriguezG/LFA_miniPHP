/* The following code was generated by JFlex 1.6.1 */

package pruebainicial;
import static pruebainicial.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/walterrodriguez/NetBeansProjects/PruebaInicial/src/pruebainicial/AnalizadorLex.flex</tt>
 */
class AnalizadorLex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\106\1\75\1\77\1\76\1\76\22\0\1\74\1\66\1\72"+
    "\1\0\1\100\1\63\1\67\1\105\2\0\1\64\1\63\1\0\1\63"+
    "\1\71\1\65\12\2\1\0\1\102\1\5\1\62\1\7\1\6\1\0"+
    "\1\23\1\25\1\10\1\15\1\14\1\22\1\24\1\4\1\20\2\1"+
    "\1\11\1\101\1\13\1\12\1\3\1\1\1\26\1\16\1\21\1\30"+
    "\1\27\1\17\1\32\1\31\1\1\1\103\1\0\1\104\1\0\1\73"+
    "\1\0\1\34\1\36\1\33\1\44\1\37\1\46\1\51\1\55\1\47"+
    "\2\1\1\35\1\52\1\41\1\40\1\53\1\57\1\45\1\42\1\43"+
    "\1\54\1\60\1\56\1\61\1\50\1\1\1\0\1\70\10\0\1\77"+
    "\113\0\1\1\37\0\1\1\u1f36\0\1\77\1\77\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\3\26\1"+
    "\1\4\3\5\4\1\1\6\1\1\1\7\1\1\1\10"+
    "\3\0\1\11\1\3\1\12\41\0\1\13\1\0\1\14"+
    "\1\0\1\15\1\16\4\0\1\17\1\20\27\0\2\21"+
    "\1\0\1\16\1\22\14\0\1\23\51\0\1\17\15\0"+
    "\1\24\25\0\1\25\1\0\1\26\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u01aa\0\107\0\u080b"+
    "\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\107"+
    "\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\107\0\107\0\107"+
    "\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97"+
    "\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207"+
    "\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f"+
    "\0\u1486\0\u14cd\0\u1514\0\107\0\u155b\0\107\0\107\0\u15a2"+
    "\0\u15e9\0\u1630\0\u1677\0\107\0\u16be\0\u1705\0\u174c\0\u1793"+
    "\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb"+
    "\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03"+
    "\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u13f8\0\107\0\u1d66\0\u1d66"+
    "\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57"+
    "\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\107\0\u2101\0\u2148"+
    "\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380"+
    "\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8"+
    "\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98"+
    "\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\107\0\u3042\0\u3089"+
    "\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1"+
    "\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9"+
    "\0\u3540\0\u3587\0\u35ce\0\u2646\0\u3615\0\107\0\u365c\0\u36a3"+
    "\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\3\2\1\11\1\2\1\12\2\2\1\13\1\14\1\15"+
    "\1\16\1\2\1\17\3\2\1\20\1\21\1\15\2\2"+
    "\1\22\1\2\1\23\1\12\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\2\1\33\1\34\3\2\1\35"+
    "\1\20\1\36\1\37\1\40\1\41\1\7\1\42\1\43"+
    "\1\2\1\44\1\45\3\46\1\0\1\47\1\2\1\50"+
    "\2\2\1\51\1\46\111\0\1\3\66\0\1\52\21\0"+
    "\1\53\21\0\1\54\16\0\1\54\7\0\1\53\32\0"+
    "\1\55\1\0\2\55\1\0\1\56\1\57\52\55\1\57"+
    "\16\0\1\55\14\0\1\60\161\0\1\57\35\0\1\61"+
    "\23\0\1\61\64\0\1\62\25\0\1\62\66\0\1\63"+
    "\21\0\1\63\71\0\1\64\16\0\1\64\25\0\1\65"+
    "\33\0\1\66\2\0\1\67\10\0\1\67\12\0\1\66"+
    "\64\0\1\70\10\0\1\70\61\0\1\71\23\0\1\71"+
    "\65\0\1\72\22\0\1\72\61\0\1\73\25\0\1\73"+
    "\57\0\1\61\22\0\1\74\1\61\2\0\1\75\61\0"+
    "\1\62\17\0\1\76\5\0\1\77\17\0\1\100\61\0"+
    "\1\101\2\0\1\102\75\0\1\64\16\0\1\64\100\0"+
    "\1\103\63\0\1\72\22\0\1\104\67\0\1\66\2\0"+
    "\1\67\10\0\1\67\12\0\1\105\100\0\1\106\10\0"+
    "\1\107\103\0\1\110\50\0\1\71\23\0\1\71\2\0"+
    "\1\111\52\0\1\53\21\0\1\54\16\0\1\112\6\0"+
    "\1\113\1\53\73\0\1\114\100\0\1\115\136\0\1\37"+
    "\106\0\1\116\1\117\110\0\1\57\107\0\1\57\17\0"+
    "\1\120\1\0\2\120\3\0\52\120\17\0\1\120\100\0"+
    "\1\121\107\0\3\46\7\0\1\46\1\0\1\122\1\0"+
    "\2\122\3\0\52\122\17\0\1\122\6\0\1\123\1\0"+
    "\2\123\3\0\52\123\17\0\1\123\7\0\1\52\107\0"+
    "\1\124\47\0\1\124\53\0\1\125\26\0\1\125\40\0"+
    "\1\55\1\123\2\55\2\0\1\126\52\55\10\0\1\127"+
    "\2\123\4\0\1\55\3\0\1\126\13\0\1\130\25\0"+
    "\1\130\63\0\1\131\26\0\1\131\65\0\1\132\10\0"+
    "\1\132\102\0\1\133\1\134\16\0\1\134\3\0\1\133"+
    "\33\0\1\135\1\0\2\135\3\0\52\135\17\0\1\135"+
    "\20\0\1\136\25\0\1\136\56\0\1\137\23\0\1\137"+
    "\67\0\1\140\23\0\1\140\56\0\1\141\25\0\1\141"+
    "\67\0\1\142\21\0\1\142\71\0\1\134\16\0\1\134"+
    "\76\0\1\143\112\0\1\144\122\0\1\145\46\0\1\131"+
    "\26\0\1\146\105\0\1\147\115\0\1\150\112\0\1\134"+
    "\63\0\1\151\12\0\1\152\61\0\1\142\21\0\1\142"+
    "\13\0\1\153\42\0\1\136\25\0\1\154\100\0\1\155"+
    "\6\0\1\156\1\157\116\0\1\160\72\0\1\161\112\0"+
    "\1\145\63\0\1\125\26\0\1\162\75\0\1\163\107\0"+
    "\1\134\114\0\1\134\133\0\1\164\14\0\74\117\1\165"+
    "\1\166\2\0\7\117\1\167\1\120\1\167\2\120\2\167"+
    "\1\170\52\120\10\167\1\171\2\167\3\0\1\167\1\120"+
    "\5\167\10\0\1\172\1\173\1\0\1\174\1\0\1\175"+
    "\3\0\1\176\1\177\10\0\1\172\1\0\1\173\3\0"+
    "\1\174\1\0\1\176\1\175\1\0\1\177\3\0\1\200"+
    "\26\0\1\200\6\0\4\122\3\0\52\122\11\0\1\122"+
    "\5\0\1\122\1\0\1\201\4\0\4\123\2\0\1\126"+
    "\52\123\11\0\2\123\4\0\1\123\3\0\1\126\30\0"+
    "\1\202\30\0\1\202\41\0\1\203\25\0\1\203\63\0"+
    "\1\204\23\0\1\204\65\0\1\205\21\0\1\205\57\0"+
    "\1\206\22\0\1\206\50\0\1\135\1\0\2\135\3\0"+
    "\52\135\11\0\1\65\5\0\1\135\30\0\1\207\10\0"+
    "\1\207\70\0\1\133\23\0\1\133\65\0\1\210\21\0"+
    "\1\210\70\0\1\136\10\0\1\136\100\0\1\211\23\0"+
    "\1\211\67\0\1\212\113\0\1\213\1\214\103\0\1\134"+
    "\64\0\1\204\23\0\1\204\1\0\1\215\101\0\1\216"+
    "\106\0\1\217\104\0\1\220\105\0\1\221\126\0\1\222"+
    "\55\0\1\207\10\0\1\223\107\0\1\224\114\0\1\225"+
    "\102\0\1\226\104\0\1\227\106\0\1\230\100\0\1\202"+
    "\11\0\1\213\16\0\1\202\63\0\1\231\52\0\1\232"+
    "\1\0\2\232\3\0\52\232\17\0\1\232\5\0\72\167"+
    "\1\171\2\167\3\0\7\167\11\0\1\233\23\0\1\233"+
    "\71\0\1\234\26\0\1\234\62\0\1\235\10\0\1\235"+
    "\72\0\1\236\26\0\1\236\65\0\1\237\16\0\1\237"+
    "\61\0\1\240\7\0\1\241\16\0\1\240\4\0\1\241"+
    "\46\0\1\242\22\0\1\242\51\0\1\243\127\0\1\244"+
    "\10\0\1\244\66\0\1\134\22\0\1\134\66\0\1\245"+
    "\36\0\1\245\50\0\1\246\26\0\1\246\50\0\1\134"+
    "\23\0\1\134\77\0\1\247\16\0\1\247\67\0\1\250"+
    "\16\0\1\250\75\0\1\251\115\0\1\134\112\0\1\252"+
    "\76\0\1\253\110\0\1\254\107\0\1\255\100\0\1\256"+
    "\126\0\1\257\101\0\1\256\50\0\1\134\23\0\1\260"+
    "\125\0\1\261\66\0\1\262\117\0\1\263\100\0\1\264"+
    "\113\0\1\134\111\0\1\265\37\0\72\232\1\266\2\232"+
    "\3\0\7\232\23\0\1\267\10\0\1\267\65\0\1\270"+
    "\25\0\1\270\117\0\1\271\26\0\1\271\33\0\1\272"+
    "\16\0\1\272\64\0\1\273\10\0\1\273\63\0\1\270"+
    "\23\0\1\270\64\0\1\274\25\0\1\274\66\0\1\275"+
    "\21\0\1\275\45\0\1\243\101\0\1\276\23\0\1\203"+
    "\21\0\1\203\63\0\1\277\26\0\1\277\47\0\1\134"+
    "\22\0\1\134\76\0\1\300\10\0\1\300\65\0\1\134"+
    "\25\0\1\134\103\0\1\301\111\0\1\302\100\0\1\151"+
    "\117\0\1\303\115\0\1\304\100\0\1\114\76\0\1\213"+
    "\106\0\1\305\115\0\1\114\103\0\1\306\113\0\1\304"+
    "\112\0\1\307\67\0\1\134\53\0\64\232\1\310\5\232"+
    "\1\266\2\232\3\0\7\232\16\0\1\311\23\0\1\311"+
    "\60\0\1\272\22\0\1\272\63\0\1\312\22\0\1\312"+
    "\142\0\1\313\33\0\1\314\26\0\1\314\60\0\1\315"+
    "\21\0\1\315\47\0\1\316\50\0\1\316\52\0\1\317"+
    "\21\0\1\317\53\0\1\320\22\0\1\320\110\0\1\114"+
    "\125\0\1\114\74\0\1\134\100\0\1\321\122\0\1\134"+
    "\71\0\1\322\112\0\1\323\47\0\65\232\1\324\4\232"+
    "\1\266\2\232\3\0\7\232\16\0\1\272\23\0\1\272"+
    "\62\0\1\325\23\0\1\325\137\0\1\326\34\0\1\272"+
    "\21\0\1\272\63\0\1\327\26\0\1\327\51\0\1\330"+
    "\25\0\1\330\56\0\1\331\22\0\1\331\74\0\1\134"+
    "\21\0\1\134\76\0\1\114\112\0\1\332\110\0\1\333"+
    "\50\0\1\334\47\0\1\334\45\0\1\335\25\0\1\335"+
    "\63\0\1\272\26\0\1\272\46\0\1\134\50\0\1\134"+
    "\71\0\1\336\111\0\1\303\66\0\1\337\10\0\1\337"+
    "\65\0\1\272\25\0\1\272\113\0\1\134\50\0\1\270"+
    "\22\0\1\270\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14555];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\1\11\10\1\1\11\2\1\3\0"+
    "\3\11\41\0\1\1\1\0\1\11\1\0\2\11\4\0"+
    "\1\11\1\1\27\0\1\1\1\11\1\0\2\1\14\0"+
    "\1\11\51\0\1\1\15\0\1\11\25\0\1\1\1\0"+
    "\1\11\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 23: break;
          case 2: 
            { return TDatoEntero;
            }
          case 24: break;
          case 3: 
            { return OperadorLogico;
            }
          case 25: break;
          case 4: 
            { return AsignacionVariable;
            }
          case 26: break;
          case 5: 
            { return OperadorAritmetico;
            }
          case 27: break;
          case 6: 
            { /*Ignore*/
            }
          case 28: break;
          case 7: 
            { return Separador;
            }
          case 29: break;
          case 8: 
            { return TDatoDouble;
            }
          case 30: break;
          case 9: 
            { return SimboloInicio;
            }
          case 31: break;
          case 10: 
            { return SimboloFin;
            }
          case 32: break;
          case 11: 
            { return Variable;
            }
          case 33: break;
          case 12: 
            { return SintaxisPHP;
            }
          case 34: break;
          case 13: 
            { return Titulo;
            }
          case 35: break;
          case 14: 
            { return SaltoLinea;
            }
          case 36: break;
          case 15: 
            { return PReservada;
            }
          case 37: break;
          case 16: 
            { return Identificadores;
            }
          case 38: break;
          case 17: 
            { return ComentarioLineal;
            }
          case 39: break;
          case 18: 
            { return TDatoString;
            }
          case 40: break;
          case 19: 
            { return TDatoLogico;
            }
          case 41: break;
          case 20: 
            { return Vector;
            }
          case 42: break;
          case 21: 
            { return ComentarioExtendido;
            }
          case 43: break;
          case 22: 
            { return VarCons;
            }
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
