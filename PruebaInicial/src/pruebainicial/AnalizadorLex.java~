/* The following code was generated by JFlex 1.6.1 */

package pruebainicial;
import static pruebainicial.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/walterrodriguez/NetBeansProjects/PruebaInicial/src/pruebainicial/AnalizadorLex.flex</tt>
 */
class AnalizadorLex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\74\1\61\1\63\1\62\1\62\22\0\1\60\1\52\1\56"+
    "\1\65\1\64\1\47\1\53\1\73\1\66\1\67\1\50\1\47\1\65"+
    "\1\47\1\55\1\51\12\2\1\65\1\70\1\5\1\46\1\7\1\6"+
    "\1\65\1\23\1\25\1\10\1\15\1\14\1\22\1\24\1\4\1\20"+
    "\1\1\1\1\1\11\1\44\1\13\1\12\1\3\1\45\1\26\1\16"+
    "\1\21\1\30\1\27\1\17\1\32\1\31\1\1\1\71\1\0\1\72"+
    "\1\65\1\57\1\0\1\37\1\25\1\40\1\15\1\41\1\43\1\24"+
    "\1\4\1\33\1\1\1\1\1\11\1\44\1\34\1\42\1\3\1\45"+
    "\1\26\1\35\1\36\1\30\1\27\1\17\1\32\1\31\1\1\1\75"+
    "\1\54\1\76\7\0\1\63\113\0\1\1\37\0\1\1\u1f36\0\1\63"+
    "\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\4\1\1\1\4"+
    "\21\2\1\5\3\6\4\1\1\7\1\1\1\10\1\11"+
    "\1\12\1\1\1\13\1\14\1\0\1\15\3\2\1\0"+
    "\1\16\1\4\1\17\1\4\16\2\1\0\13\2\1\0"+
    "\1\6\3\20\1\0\1\21\1\0\1\22\1\0\1\23"+
    "\2\2\1\24\5\2\1\25\27\2\1\0\2\26\1\0"+
    "\1\24\1\21\10\0\21\2\1\27\1\0\10\2\11\0"+
    "\20\2\1\25\5\2\7\0\1\30\13\2\6\0\5\2"+
    "\1\0\1\31\2\0\4\2\2\0\1\2\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u01b9\0\77\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\77\0\77\0\77\0\u081f\0\77"+
    "\0\77\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u0999"+
    "\0\u0999\0\77\0\77\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4"+
    "\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc"+
    "\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u103e\0\77"+
    "\0\u103e\0\u107d\0\u10bc\0\u10bc\0\u10fb\0\u113a\0\u1179\0\176"+
    "\0\u11b8\0\u11f7\0\77\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332"+
    "\0\176\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb"+
    "\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3"+
    "\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db"+
    "\0\u107d\0\u107d\0\77\0\u191a\0\u191a\0\u191a\0\u1959\0\u1998"+
    "\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90"+
    "\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88"+
    "\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\176"+
    "\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139"+
    "\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331"+
    "\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529"+
    "\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721"+
    "\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919"+
    "\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\77"+
    "\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca"+
    "\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2"+
    "\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\77"+
    "\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273"+
    "\0\u32b2\0\u32f1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\2\3\1\12\1\13\1\14\1\15\1\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\3\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\12\1\15\1\31\1\21\1\11"+
    "\1\13\1\3\1\20\2\3\1\32\1\33\1\34\1\35"+
    "\1\10\1\36\1\37\1\2\1\40\1\41\3\42\1\0"+
    "\1\43\1\2\1\44\1\45\1\46\2\2\1\47\1\42"+
    "\1\50\1\51\100\0\1\3\1\0\2\3\3\0\36\3"+
    "\11\0\1\52\21\0\1\4\52\0\1\53\22\0\1\3"+
    "\1\0\1\3\1\54\3\0\16\3\1\55\1\3\1\56"+
    "\15\3\11\0\1\52\17\0\6\57\1\60\1\61\36\57"+
    "\1\61\12\57\3\0\13\57\7\0\1\62\135\0\1\63"+
    "\31\0\1\3\1\0\2\3\3\0\1\3\1\64\1\65"+
    "\10\3\1\66\13\3\1\66\2\3\1\65\3\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\4\3\1\67"+
    "\6\3\1\70\13\3\1\70\1\3\1\67\4\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\1\71\2\3"+
    "\1\72\16\3\1\73\1\3\1\72\3\3\1\71\5\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\4\3"+
    "\1\74\3\3\1\75\12\3\1\75\5\3\1\74\4\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\11\3"+
    "\1\76\14\3\1\76\7\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\3\3\1\77\20\3\1\77\7\3"+
    "\1\100\1\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\16\3\1\101\17\3\11\0\1\102\20\0\1\3"+
    "\1\0\2\3\3\0\10\3\1\103\2\3\1\104\4\3"+
    "\1\105\2\3\1\103\3\3\1\104\6\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\15\3\1\106\20\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\1\3"+
    "\1\107\1\110\27\3\1\110\3\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\4\3\1\111\24\3\1\111"+
    "\4\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\13\3\1\112\13\3\1\112\6\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\6\3\1\113\16\3\1\113"+
    "\10\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\10\3\1\114\12\3\1\114\12\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\2\3\1\112\27\3\1\112"+
    "\3\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\3\3\1\77\20\3\1\115\7\3\1\100\1\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\16\3\1\101"+
    "\17\3\11\0\1\52\20\0\47\116\1\117\1\120\2\116"+
    "\1\0\1\116\1\0\3\116\2\0\5\116\7\0\47\116"+
    "\1\121\1\122\2\116\1\0\1\116\1\0\3\116\2\0"+
    "\5\116\61\0\1\63\77\0\1\63\22\0\56\123\1\124"+
    "\2\123\3\0\13\123\57\0\1\125\77\0\3\42\11\0"+
    "\1\42\3\0\1\126\1\0\2\126\3\0\36\126\31\0"+
    "\61\57\3\0\13\57\1\0\1\127\1\0\2\127\3\0"+
    "\36\127\33\0\1\53\75\0\1\3\1\0\1\130\1\3"+
    "\3\0\36\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\10\3\1\131\12\3\1\131\12\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\15\3\1\132\20\3"+
    "\11\0\1\52\26\0\1\133\46\0\1\133\14\0\1\133"+
    "\4\0\1\3\1\0\2\3\3\0\2\3\1\134\27\3"+
    "\1\134\3\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\2\3\1\135\1\136\20\3\1\137\11\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\1\3\1\140"+
    "\34\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\7\3\1\141\26\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\34\3\1\142\1\3\11\0\1\52\20\0"+
    "\1\3\1\0\1\3\1\143\3\0\36\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\5\3\1\144\30\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\11\3"+
    "\1\145\14\3\1\145\7\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\1\146\11\3\1\147\15\3\1\146"+
    "\2\3\1\147\2\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\16\3\1\150\17\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\13\3\1\151\2\3\1\152"+
    "\10\3\1\151\6\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\1\153\10\3\1\154\14\3\1\154\1\3"+
    "\1\153\5\3\11\0\1\52\20\0\1\3\1\0\1\155"+
    "\1\3\3\0\36\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\20\3\1\156\1\141\14\3\11\0\1\52"+
    "\20\0\1\157\1\0\2\157\3\0\36\157\32\0\1\3"+
    "\1\0\2\3\3\0\3\3\1\160\20\3\1\160\11\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\1\3"+
    "\1\161\34\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\3\3\1\162\20\3\1\162\11\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\6\3\1\163\16\3"+
    "\1\163\10\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\2\3\1\164\27\3\1\164\3\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\11\3\1\143\14\3"+
    "\1\143\7\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\11\3\1\165\14\3\1\165\6\3\1\166\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\16\3\1\141"+
    "\17\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\4\3\1\141\24\3\1\141\4\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\4\3\1\167\24\3\1\167"+
    "\4\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\1\153\10\3\1\154\13\3\1\170\1\154\1\3\1\153"+
    "\5\3\11\0\1\52\20\0\47\116\1\121\1\120\2\116"+
    "\1\0\1\116\1\0\3\116\2\0\5\116\6\0\60\171"+
    "\1\172\1\173\2\0\13\171\7\174\1\175\46\174\1\176"+
    "\2\174\3\0\7\174\1\175\3\174\10\0\1\177\1\200"+
    "\1\0\1\201\1\0\1\202\3\0\1\203\1\204\11\0"+
    "\1\201\1\0\1\203\1\0\1\177\2\0\1\204\1\205"+
    "\33\0\4\126\3\0\36\126\11\0\1\126\11\0\1\206"+
    "\6\0\1\127\1\207\2\127\3\0\36\127\32\0\1\3"+
    "\1\0\2\3\3\0\3\3\1\210\13\3\1\211\4\3"+
    "\1\210\11\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\1\3\1\212\34\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\3\3\1\113\20\3\1\113\11\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\11\3"+
    "\1\213\14\3\1\213\7\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\6\3\1\210\16\3\1\210\10\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\6\3"+
    "\1\210\2\3\1\213\13\3\1\210\1\213\7\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\1\3\1\214"+
    "\34\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\4\3\1\215\24\3\1\215\4\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\2\3\1\141\27\3\1\141"+
    "\3\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\5\3\1\216\1\217\16\3\1\217\10\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\4\3\1\220\24\3"+
    "\1\220\4\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\1\3\1\221\34\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\13\3\1\222\13\3\1\222\6\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\3\3"+
    "\1\223\20\3\1\223\11\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\11\3\1\212\14\3\1\212\7\3"+
    "\11\0\1\52\20\0\1\3\1\0\1\224\1\3\3\0"+
    "\11\3\1\112\14\3\1\112\7\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\1\3\1\225\34\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\4\3\1\226"+
    "\24\3\1\226\4\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\1\3\1\227\34\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\4\3\1\230\24\3\1\230"+
    "\4\3\11\0\1\52\20\0\1\157\1\207\2\157\3\0"+
    "\36\157\11\0\1\231\20\0\1\3\1\0\2\3\3\0"+
    "\13\3\1\232\13\3\1\232\6\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\6\3\1\156\16\3\1\156"+
    "\10\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\1\233\27\3\1\233\5\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\11\3\1\234\14\3\1\234\7\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\15\3"+
    "\1\235\20\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\20\3\1\236\15\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\20\3\1\237\15\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\1\3\1\240\34\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\26\3"+
    "\1\241\7\3\11\0\1\52\17\0\56\174\1\176\2\174"+
    "\3\0\13\174\11\0\1\242\105\0\1\243\12\0\1\243"+
    "\66\0\1\244\13\0\1\244\57\0\1\245\12\0\1\245"+
    "\71\0\1\246\70\0\1\247\7\0\1\250\2\0\1\247"+
    "\57\0\1\251\24\0\1\251\37\0\1\252\76\0\1\207"+
    "\54\0\1\52\20\0\1\3\1\0\2\3\3\0\11\3"+
    "\1\141\14\3\1\141\7\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\13\3\1\253\13\3\1\253\6\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\10\3"+
    "\1\254\12\3\1\254\12\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\10\3\1\255\12\3\1\255\12\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\13\3"+
    "\1\256\13\3\1\256\6\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\6\3\1\257\16\3\1\257\10\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\4\3"+
    "\1\260\24\3\1\260\4\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\7\3\1\261\26\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\3\3\1\262\20\3"+
    "\1\262\11\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\13\3\1\263\13\3\1\263\6\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\20\3\1\264\15\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\13\3"+
    "\1\265\13\3\1\265\6\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\2\3\1\266\27\3\1\266\3\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\20\3"+
    "\1\267\15\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\16\3\1\270\17\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\4\3\1\271\24\3\1\271\4\3"+
    "\11\0\1\52\20\0\1\272\1\0\2\272\3\0\36\272"+
    "\32\0\1\3\1\0\2\3\3\0\1\3\1\273\34\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\11\3"+
    "\1\274\14\3\1\274\7\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\16\3\1\275\17\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\13\3\1\276\13\3"+
    "\1\276\6\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\16\3\1\277\17\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\10\3\1\263\12\3\1\263\12\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\5\3"+
    "\1\141\30\3\11\0\1\52\20\0\1\3\1\0\2\3"+
    "\3\0\27\3\1\300\6\3\11\0\1\52\42\0\1\301"+
    "\13\0\1\301\52\0\1\302\20\0\1\302\106\0\1\303"+
    "\60\0\1\304\73\0\1\305\13\0\1\305\50\0\1\302"+
    "\100\0\1\306\20\0\1\306\63\0\1\307\14\0\1\307"+
    "\42\0\1\252\67\0\1\310\5\0\1\3\1\0\2\3"+
    "\3\0\11\3\1\113\14\3\1\113\7\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\1\141\27\3\1\141"+
    "\5\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\3\3\1\311\20\3\1\311\11\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\15\3\1\312\20\3\11\0"+
    "\1\52\20\0\1\3\1\0\1\313\1\3\3\0\36\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\1\146"+
    "\27\3\1\146\5\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\10\3\1\314\12\3\1\314\12\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\4\3\1\315"+
    "\24\3\1\315\4\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\16\3\1\113\17\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\1\3\1\210\34\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\34\3\1\113"+
    "\1\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\6\3\1\141\16\3\1\141\10\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\5\3\1\113\30\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\12\3\1\316"+
    "\20\3\1\316\2\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\34\3\1\317\1\3\11\0\1\52\20\0"+
    "\1\272\1\0\2\272\3\0\36\272\11\0\1\231\20\0"+
    "\1\3\1\0\2\3\3\0\1\3\1\320\34\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\10\3\1\321"+
    "\12\3\1\321\12\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\13\3\1\322\13\3\1\322\6\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\1\3\1\141"+
    "\34\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\3\3\1\141\20\3\1\141\11\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\24\3\1\323\11\3\11\0"+
    "\1\52\35\0\1\324\16\0\1\324\55\0\1\304\24\0"+
    "\1\304\51\0\1\325\24\0\1\325\114\0\1\326\37\0"+
    "\1\327\12\0\1\327\64\0\1\330\14\0\1\330\44\0"+
    "\1\331\73\0\1\3\1\0\2\3\3\0\20\3\1\113"+
    "\15\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\1\3\1\113\34\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\13\3\1\332\13\3\1\332\6\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\11\3\1\333"+
    "\14\3\1\333\7\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\5\3\1\266\30\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\13\3\1\334\13\3\1\334"+
    "\6\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\4\3\1\335\24\3\1\335\4\3\11\0\1\52\20\0"+
    "\1\3\1\0\2\3\3\0\21\3\1\141\14\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\2\3\1\277"+
    "\27\3\1\277\3\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\1\210\27\3\1\210\5\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\30\3\1\336\5\3"+
    "\11\0\1\52\35\0\1\304\16\0\1\304\57\0\1\337"+
    "\16\0\1\337\120\0\1\340\40\0\1\304\14\0\1\304"+
    "\60\0\1\341\12\0\1\341\55\0\1\342\27\0\1\342"+
    "\35\0\1\3\1\0\2\3\3\0\1\113\27\3\1\113"+
    "\5\3\11\0\1\52\20\0\1\3\1\0\2\3\3\0"+
    "\1\343\27\3\1\343\5\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\1\344\27\3\1\344\5\3\11\0"+
    "\1\52\20\0\1\3\1\0\2\3\3\0\3\3\1\345"+
    "\20\3\1\345\11\3\11\0\1\52\20\0\1\3\1\0"+
    "\2\3\3\0\31\3\1\346\4\3\11\0\1\52\22\0"+
    "\1\347\105\0\1\350\27\0\1\350\51\0\1\304\62\0"+
    "\1\3\1\0\1\3\1\141\3\0\36\3\11\0\1\52"+
    "\20\0\1\3\1\0\2\3\3\0\31\3\1\141\4\3"+
    "\11\0\1\52\20\0\1\3\1\0\2\3\3\0\11\3"+
    "\1\266\14\3\1\266\7\3\11\0\1\52\20\0\1\3"+
    "\1\0\2\3\3\0\32\3\1\351\3\3\11\0\1\52"+
    "\42\0\1\352\13\0\1\352\52\0\1\304\20\0\1\304"+
    "\43\0\1\3\1\0\2\3\3\0\33\3\1\141\2\3"+
    "\11\0\1\52\27\0\1\302\27\0\1\302\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\1\11\10\1\3\11\1\1\2\11"+
    "\1\0\4\1\1\0\2\1\2\11\16\1\1\0\13\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\11\35\1\1\0\1\1\1\11\1\0"+
    "\2\1\10\0\22\1\1\0\10\1\11\0\26\1\7\0"+
    "\1\11\13\1\6\0\5\1\1\0\1\11\2\0\4\1"+
    "\2\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 26: break;
          case 2: 
            { lexeme=yytext(); return Identificadores;
            }
          case 27: break;
          case 3: 
            { lexeme=yytext(); return TDatoEntero;
            }
          case 28: break;
          case 4: 
            { lexeme=yytext(); return OperadorLogico;
            }
          case 29: break;
          case 5: 
            { return AsignacionVariable;
            }
          case 30: break;
          case 6: 
            { lexeme=yytext(); return OperadorAritmetico;
            }
          case 31: break;
          case 7: 
            { /*Ignore*/
            }
          case 32: break;
          case 8: 
            { lexeme=yytext(); return AperturaDefinicion;
            }
          case 33: break;
          case 9: 
            { lexeme=yytext(); return FinDefinicion;
            }
          case 34: break;
          case 10: 
            { lexeme=yytext(); return Separador;
            }
          case 35: break;
          case 11: 
            { lexeme=yytext(); return InicioFuncion;
            }
          case 36: break;
          case 12: 
            { lexeme=yytext();  return FinFuncion;
            }
          case 37: break;
          case 13: 
            { lexeme=yytext(); return TDatoDouble;
            }
          case 38: break;
          case 14: 
            { return SimboloInicio;
            }
          case 39: break;
          case 15: 
            { return SimboloFin;
            }
          case 40: break;
          case 16: 
            { lexeme=yytext(); return ComentarioExtendido;
            }
          case 41: break;
          case 17: 
            { lexeme = yytext(); return TDatoString;
            }
          case 42: break;
          case 18: 
            { lexeme=yytext(); return Variable;
            }
          case 43: break;
          case 19: 
            { return SintaxisPHP;
            }
          case 44: break;
          case 20: 
            { lexeme=yytext(); return ValorHTML;
            }
          case 45: break;
          case 21: 
            { lexeme=yytext(); return PReservada;
            }
          case 46: break;
          case 22: 
            { lexeme=yytext(); return ComentarioLineal;
            }
          case 47: break;
          case 23: 
            { lexeme=yytext(); return TDatoLogico;
            }
          case 48: break;
          case 24: 
            { lexeme=yytext(); return Vector;
            }
          case 49: break;
          case 25: 
            { lexeme=yytext(); return VarCons;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
