/* The following code was generated by JFlex 1.6.1 */

package pruebainicial;
import static pruebainicial.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/walterrodriguez/NetBeansProjects/PruebaInicial/src/pruebainicial/AnalizadorLex.flex</tt>
 */
class AnalizadorLex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\55\1\56\1\55\1\55\22\0\1\54\1\46\1\52"+
    "\1\60\1\57\1\43\1\47\1\64\1\61\1\62\1\44\1\43\1\63"+
    "\1\41\1\51\1\45\12\2\1\42\1\63\1\5\1\40\1\7\1\6"+
    "\1\60\1\23\1\25\1\10\1\15\1\14\1\22\1\24\1\4\1\20"+
    "\1\1\1\72\1\11\1\33\1\13\1\34\1\3\1\36\1\26\1\16"+
    "\1\21\1\30\1\27\1\17\1\32\1\31\1\1\1\65\1\63\1\66"+
    "\1\60\1\53\1\60\1\23\1\25\1\10\1\15\1\37\1\22\1\24"+
    "\1\4\1\20\1\1\1\72\1\11\1\33\1\35\1\12\1\3\1\36"+
    "\1\26\1\16\1\21\1\30\1\27\1\17\1\32\1\31\1\1\1\70"+
    "\1\50\1\71\1\60\6\0\1\56\71\0\1\63\21\0\1\1\37\0"+
    "\1\1\u1f36\0\1\56\1\56\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\1\1\1\4\1\5\1\4"+
    "\21\1\1\6\1\7\1\6\3\7\1\2\3\5\1\10"+
    "\1\2\1\11\1\12\1\5\1\13\1\14\1\15\3\1"+
    "\1\0\1\16\1\4\1\17\1\4\30\1\1\20\10\1"+
    "\1\0\1\21\1\0\1\22\2\23\1\24\2\1\1\25"+
    "\12\1\1\0\12\1\1\0\15\1\2\0\1\25\1\22"+
    "\1\0\1\23\13\1\1\26\11\1\1\27\1\1\1\30"+
    "\1\1\1\0\10\1\1\31\1\0\1\23\22\1\1\32"+
    "\1\20\5\1\1\33\1\23\14\1\1\0\1\23\6\1"+
    "\1\34\1\23\4\1\1\23\1\1\1\23\1\0\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u019d\0\u05c3\0\73\0\73\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\73\0\u06ea\0\u0725\0\u0760\0\73\0\73\0\u079b"+
    "\0\73\0\73\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08c2"+
    "\0\u08c2\0\73\0\73\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\166\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u10d3"+
    "\0\u110e\0\u1149\0\166\0\u1184\0\u11bf\0\73\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a46\0\u1a46\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\73\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\73\0\u1f93\0\166\0\u1fce"+
    "\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6"+
    "\0\u21e1\0\u105d\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343"+
    "\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b"+
    "\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\73\0\u26b8"+
    "\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\73\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\73\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\2\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\2\3\1\12\1\3\1\13\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\10\1\40\1\41\1\42"+
    "\1\43\1\3\2\44\1\0\1\45\1\2\1\46\1\47"+
    "\1\42\1\50\2\2\1\44\1\51\1\52\1\3\74\0"+
    "\4\3\3\0\30\3\13\0\1\3\16\0\1\3\1\0"+
    "\1\3\1\4\2\3\3\0\30\3\11\0\1\53\1\0"+
    "\1\3\16\0\1\3\1\0\3\3\1\54\3\0\16\3"+
    "\1\55\1\3\1\56\7\3\13\0\1\3\16\0\1\3"+
    "\6\57\1\60\1\61\30\57\1\61\14\57\2\0\14\57"+
    "\7\0\1\62\123\0\1\63\33\0\4\3\3\0\1\3"+
    "\1\64\1\65\10\3\1\66\10\3\1\65\3\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\4\3\1\67"+
    "\6\3\1\70\13\3\1\67\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\1\71\1\72\1\3\1\73\16\3"+
    "\1\74\2\3\1\73\2\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\2\3\1\75\1\3\1\76\3\3"+
    "\1\77\13\3\1\75\2\3\1\76\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\7\3\1\100\1\3\1\101"+
    "\16\3\13\0\1\3\16\0\1\3\1\0\3\3\1\102"+
    "\3\0\30\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\3\3\1\103\6\3\1\104\10\3\1\105\1\3"+
    "\1\103\2\3\13\0\1\3\16\0\1\3\1\0\3\3"+
    "\1\106\3\0\16\3\1\107\11\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\2\3\1\110\5\3\1\111"+
    "\2\3\1\112\4\3\1\113\3\3\1\110\3\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\6\3\1\114"+
    "\6\3\1\115\12\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\1\3\1\116\1\117\21\3\1\117\3\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\16\3"+
    "\1\120\11\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\4\3\1\121\22\3\1\121\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\13\3\1\122\14\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\6\3\1\123"+
    "\21\3\13\0\1\3\16\0\1\3\1\0\4\3\3\0"+
    "\10\3\1\124\17\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\2\3\1\122\21\3\1\122\3\3\13\0"+
    "\1\3\16\0\1\3\7\0\1\34\127\0\1\35\72\0"+
    "\1\125\1\126\74\0\1\63\73\0\1\63\22\0\52\127"+
    "\1\130\2\127\2\0\14\127\54\0\2\44\11\0\1\44"+
    "\4\0\1\131\1\0\2\131\3\0\16\131\1\132\11\131"+
    "\32\0\1\131\55\57\2\0\14\57\2\0\1\53\71\0"+
    "\2\3\1\133\1\3\3\0\30\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\10\3\1\134\17\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\15\3\1\135"+
    "\12\3\13\0\1\3\16\0\1\3\7\0\1\136\42\0"+
    "\1\136\11\0\1\136\7\0\4\3\3\0\2\3\1\137"+
    "\21\3\1\137\3\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\3\3\1\140\20\3\1\141\1\142\2\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\1\3"+
    "\1\143\26\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\7\3\1\114\20\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\23\3\1\144\4\3\13\0\1\3"+
    "\16\0\1\3\1\0\3\3\1\145\3\0\30\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\6\3\1\146"+
    "\21\3\13\0\1\3\16\0\1\3\1\0\4\3\3\0"+
    "\5\3\1\147\22\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\11\3\1\150\16\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\30\3\13\0\1\3\2\151"+
    "\11\0\1\151\2\0\1\3\1\0\4\3\3\0\1\152"+
    "\11\3\1\153\15\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\16\3\1\154\11\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\10\3\1\155\17\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\13\3\1\156"+
    "\2\3\1\157\11\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\10\3\1\160\17\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\1\161\5\3\1\162\2\3"+
    "\1\163\16\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\30\3\13\0\1\3\2\164\11\0\1\164\2\0"+
    "\1\3\1\0\2\3\1\165\1\3\3\0\30\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\4\3\1\166"+
    "\22\3\1\166\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\20\3\1\167\1\114\6\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\16\3\1\170\11\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\3\3\1\171"+
    "\21\3\1\171\2\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\1\3\1\172\26\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\3\3\1\173\21\3\1\173"+
    "\2\3\13\0\1\3\16\0\1\3\1\0\4\3\3\0"+
    "\6\3\1\174\21\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\2\3\1\175\21\3\1\175\3\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\11\3\1\145"+
    "\16\3\13\0\1\3\16\0\1\3\1\0\4\3\3\0"+
    "\4\3\1\176\22\3\1\176\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\11\3\1\177\14\3\1\200\1\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\16\3"+
    "\1\114\11\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\4\3\1\114\22\3\1\114\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\4\3\1\201\22\3\1\201"+
    "\13\0\1\3\16\0\1\3\1\0\43\125\1\202\5\125"+
    "\1\0\3\125\1\0\5\125\3\0\1\125\2\0\1\125"+
    "\1\0\51\126\1\0\2\126\2\0\5\126\6\0\1\126"+
    "\7\203\1\204\42\203\1\205\2\203\2\0\5\203\1\204"+
    "\6\203\1\0\4\131\3\0\30\131\13\0\1\131\11\0"+
    "\1\206\4\0\1\131\1\0\4\131\3\0\4\131\1\207"+
    "\22\131\1\207\13\0\1\131\11\0\1\206\4\0\1\131"+
    "\1\0\4\3\3\0\3\3\1\210\13\3\1\211\5\3"+
    "\1\210\2\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\1\3\1\212\26\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\3\3\1\123\21\3\1\123\2\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\6\3"+
    "\1\210\21\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\11\3\1\213\16\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\6\3\1\210\2\3\1\213\16\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\1\3"+
    "\1\214\26\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\4\3\1\215\22\3\1\215\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\2\3\1\114\21\3\1\114"+
    "\3\3\13\0\1\3\16\0\1\3\1\0\4\3\3\0"+
    "\4\3\1\216\22\3\1\216\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\5\3\1\217\1\220\1\3\1\221"+
    "\17\3\13\0\1\3\16\0\1\3\1\0\4\3\3\0"+
    "\4\3\1\222\22\3\1\222\13\0\1\3\16\0\1\3"+
    "\54\0\2\151\3\0\1\223\5\0\1\151\4\0\4\3"+
    "\3\0\1\3\1\224\26\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\13\3\1\225\14\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\3\3\1\226\21\3"+
    "\1\226\2\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\11\3\1\227\16\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\11\3\1\212\16\3\13\0\1\3"+
    "\16\0\1\3\1\0\2\3\1\230\1\3\3\0\11\3"+
    "\1\122\16\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\1\3\1\231\26\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\1\3\1\232\26\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\11\3\1\233\16\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\4\3"+
    "\1\234\22\3\1\234\13\0\1\3\16\0\1\3\54\0"+
    "\2\164\3\0\1\235\5\0\1\164\4\0\4\3\3\0"+
    "\1\3\1\236\26\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\3\3\1\104\21\3\1\104\2\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\4\3\1\237"+
    "\22\3\1\237\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\4\3\1\240\22\3\1\240\13\0\1\3\2\241"+
    "\11\0\1\241\2\0\1\3\1\0\4\3\3\0\13\3"+
    "\1\242\14\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\6\3\1\167\21\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\1\243\27\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\11\3\1\244\16\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\15\3\1\245"+
    "\12\3\13\0\1\3\16\0\1\3\1\0\4\3\3\0"+
    "\13\3\1\246\14\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\20\3\1\247\7\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\20\3\1\250\7\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\1\3\1\251"+
    "\26\3\13\0\1\3\16\0\1\3\1\0\43\125\1\202"+
    "\1\252\4\125\1\0\3\125\1\0\5\125\3\0\1\125"+
    "\2\0\1\125\52\203\1\205\2\203\2\0\14\203\2\0"+
    "\1\253\71\0\4\131\3\0\1\254\27\131\13\0\1\131"+
    "\11\0\1\206\4\0\1\131\1\0\4\3\3\0\11\3"+
    "\1\114\16\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\13\3\1\255\14\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\10\3\1\256\17\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\10\3\1\257\17\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\13\3"+
    "\1\260\14\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\6\3\1\261\21\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\10\3\1\221\17\3\13\0\1\3"+
    "\2\164\11\0\1\164\2\0\1\3\1\0\4\3\3\0"+
    "\4\3\1\262\22\3\1\262\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\7\3\1\263\20\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\12\3\1\104\15\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\3\3"+
    "\1\264\21\3\1\264\2\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\13\3\1\265\14\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\20\3\1\266\7\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\13\3"+
    "\1\267\14\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\1\270\27\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\2\3\1\271\21\3\1\271\3\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\4\3\1\75"+
    "\22\3\1\75\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\20\3\1\272\7\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\13\3\1\273\14\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\16\3\1\274\11\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\4\3"+
    "\1\275\22\3\1\275\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\13\3\1\276\14\3\13\0\1\3\16\0"+
    "\1\3\54\0\2\241\3\0\1\277\5\0\1\241\4\0"+
    "\4\3\3\0\1\3\1\300\26\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\11\3\1\301\16\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\16\3\1\302"+
    "\11\3\13\0\1\3\16\0\1\3\1\0\4\3\3\0"+
    "\13\3\1\303\14\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\30\3\13\0\1\3\16\0\1\304\1\0"+
    "\4\3\3\0\16\3\1\305\11\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\10\3\1\265\17\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\5\3\1\114"+
    "\22\3\13\0\1\3\16\0\1\3\2\0\1\253\63\0"+
    "\1\306\5\0\4\131\3\0\2\131\1\307\21\131\1\307"+
    "\3\131\13\0\1\131\11\0\1\206\4\0\1\131\1\0"+
    "\4\3\3\0\11\3\1\123\16\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\1\114\27\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\3\3\1\310\21\3"+
    "\1\310\2\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\15\3\1\311\12\3\13\0\1\3\16\0\1\3"+
    "\1\0\2\3\1\312\1\3\3\0\30\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\1\152\27\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\10\3\1\313"+
    "\17\3\13\0\1\3\16\0\1\3\1\0\4\3\3\0"+
    "\4\3\1\314\22\3\1\314\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\16\3\1\123\11\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\1\3\1\210\26\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\23\3"+
    "\1\123\4\3\13\0\1\3\16\0\1\3\1\0\3\3"+
    "\1\104\3\0\30\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\6\3\1\114\21\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\5\3\1\123\22\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\3\3\1\315"+
    "\21\3\1\315\2\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\12\3\1\316\15\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\23\3\1\317\4\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\1\320\27\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\1\3"+
    "\1\321\26\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\10\3\1\322\17\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\13\3\1\323\14\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\1\3\1\114\26\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\30\3"+
    "\13\0\1\3\2\324\11\0\1\324\2\0\1\3\1\0"+
    "\4\3\3\0\3\3\1\114\21\3\1\114\2\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\131\3\0\16\131\1\325"+
    "\11\131\13\0\1\131\11\0\1\206\4\0\1\131\1\0"+
    "\4\3\3\0\20\3\1\123\7\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\1\3\1\123\26\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\13\3\1\326"+
    "\14\3\13\0\1\3\16\0\1\3\1\0\4\3\3\0"+
    "\11\3\1\327\16\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\5\3\1\271\22\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\1\330\27\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\13\3\1\331\14\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\4\3"+
    "\1\332\22\3\1\332\13\0\1\3\16\0\1\3\1\0"+
    "\3\3\1\333\3\0\30\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\21\3\1\114\6\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\2\3\1\305\21\3"+
    "\1\305\3\3\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\1\210\27\3\13\0\1\3\16\0\1\3\54\0"+
    "\2\324\3\0\1\334\5\0\1\324\4\0\4\131\3\0"+
    "\6\131\1\335\21\131\13\0\1\131\11\0\1\206\4\0"+
    "\1\131\1\0\4\3\3\0\1\123\27\3\13\0\1\3"+
    "\16\0\1\3\1\0\4\3\3\0\1\336\27\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\4\3\1\337"+
    "\22\3\1\337\13\0\1\3\16\0\1\3\1\0\4\3"+
    "\3\0\1\340\27\3\13\0\1\3\16\0\1\3\1\0"+
    "\4\3\3\0\3\3\1\341\21\3\1\341\2\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\3\3\0\30\3\13\0"+
    "\1\3\2\241\11\0\1\241\2\0\1\3\1\0\4\131"+
    "\3\0\4\131\1\342\22\131\1\342\13\0\1\131\11\0"+
    "\1\206\4\0\1\131\1\0\3\3\1\114\3\0\30\3"+
    "\13\0\1\3\16\0\1\3\1\0\4\3\3\0\2\3"+
    "\1\343\21\3\1\343\3\3\13\0\1\3\16\0\1\3"+
    "\1\0\4\3\3\0\27\3\1\114\13\0\1\3\16\0"+
    "\1\3\1\0\4\3\3\0\11\3\1\271\16\3\13\0"+
    "\1\3\16\0\1\3\1\0\4\131\3\0\11\131\1\344"+
    "\16\131\13\0\1\131\11\0\1\206\4\0\1\131\1\0"+
    "\4\3\3\0\12\3\1\114\15\3\13\0\1\3\16\0"+
    "\1\3\1\0\4\131\3\0\30\131\13\0\1\131\11\0"+
    "\1\345\4\0\1\131\2\0\1\253\61\0\1\346\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12036];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\31\1\2\11\4\1\1\11\3\1\2\11"+
    "\1\1\2\11\4\1\1\0\2\1\2\11\41\1\1\0"+
    "\1\1\1\0\6\1\1\11\12\1\1\0\12\1\1\0"+
    "\15\1\2\0\2\1\1\0\14\1\1\11\11\1\1\11"+
    "\3\1\1\0\11\1\1\0\23\1\1\11\6\1\1\11"+
    "\15\1\1\0\7\1\1\11\10\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String retornaToken;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { retornaToken=yytext(); return IdentCadena;
            }
          case 30: break;
          case 2: 
            { return ERROR;
            }
          case 31: break;
          case 3: 
            { retornaToken=yytext(); return TDatoEntero;
            }
          case 32: break;
          case 4: 
            { retornaToken=yytext(); return OperadorLogico;
            }
          case 33: break;
          case 5: 
            { retornaToken=yytext(); return Separador;
            }
          case 34: break;
          case 6: 
            { retornaToken=yytext();return AsignacionVariable;
            }
          case 35: break;
          case 7: 
            { retornaToken=yytext(); return OperadorAritmetico;
            }
          case 36: break;
          case 8: 
            { /*Ignore*/
            }
          case 37: break;
          case 9: 
            { retornaToken=yytext(); return AperturaDefinicion;
            }
          case 38: break;
          case 10: 
            { retornaToken=yytext(); return FinDefinicion;
            }
          case 39: break;
          case 11: 
            { retornaToken=yytext(); return InicioFuncion;
            }
          case 40: break;
          case 12: 
            { retornaToken=yytext();  return FinFuncion;
            }
          case 41: break;
          case 13: 
            { retornaToken=yytext(); return TDatoDouble;
            }
          case 42: break;
          case 14: 
            { retornaToken=yytext();  return SimboloInicio;
            }
          case 43: break;
          case 15: 
            { retornaToken=yytext();  return SimboloFin;
            }
          case 44: break;
          case 16: 
            { retornaToken=yytext(); return PReservada;
            }
          case 45: break;
          case 17: 
            { retornaToken=yytext(); return ComentarioLineal;
            }
          case 46: break;
          case 18: 
            { retornaToken = yytext(); return TDatoString;
            }
          case 47: break;
          case 19: 
            { retornaToken=yytext(); return Variable;
            }
          case 48: break;
          case 20: 
            { retornaToken=yytext();     return SintaxisPHP;
            }
          case 49: break;
          case 21: 
            { retornaToken=yytext(); return ValorHTML;
            }
          case 50: break;
          case 22: 
            { retornaToken=yytext(); return CicloCondicional;
            }
          case 51: break;
          case 23: 
            { retornaToken=yytext(); return Condicional;
            }
          case 52: break;
          case 24: 
            { retornaToken=yytext(); return TDatoLogico;
            }
          case 53: break;
          case 25: 
            { retornaToken=yytext(); return ComentarioExtendido;
            }
          case 54: break;
          case 26: 
            { retornaToken=yytext(); return Iterador;
            }
          case 55: break;
          case 27: 
            { retornaToken=yytext(); return Vector;
            }
          case 56: break;
          case 28: 
            { retornaToken=yytext(); return Break;
            }
          case 57: break;
          case 29: 
            { retornaToken = yytext(); return AccesoBD;
            }
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
